# -*- Makefile -*-
# This file was generated by the i18n leiningen plugin
# Do not edit this file; it iwll be overwritten the next time you run
#   lein i18n init
#

# The name of the package into which tranlsations will be placed
PACKAGE=puppetlabs.i18n
LOCALES=$(basename $(notdir $(wildcard locales/*.po)))
PACKAGE_DIR=$(subst .,/,$(PACKAGE))
BUNDLE_FILES=$(patsubst %,resources/$(PACKAGE_DIR)/Messages_%.class,$(LOCALES))
SRC_FILES=$(shell find src/ -name \*.clj)

i18n: setup update-pot msgfmt

# Update locales/messages.pot
update-pot: locales/messages.pot

locales/messages.pot: $(SRC_FILES)
	@find src/ -name \*.clj \
	    | xgettext --from-code=UTF-8 --language=lisp \
					-ktr:1 -ki18n/tr:1 \
					-o locales/messages.pot -f -

# Run msgfmt over all .po files to generate Java resource bundles
msgfmt: $(BUNDLE_FILES)
	@echo $(LOCALES) | tr ' ' '\n' > resources/locales.txt

resources/$(PACKAGE_DIR)/Messages_%.class: locales/%.po
	msgfmt --java2 -d resources -r $(PACKAGE).Messages -l $$(basename $< .po) $<

# Translators use this when they update translations; this copies any
# changes in the pot file into their language-specific po file
locales/%.po: locales/messages.pot
	@if [ -f $@ ]; then												\
		msgmerge -U $@ $< && touch $@; 								\
	else															\
		touch $@ && 												\
		msginit --no-translator -l $$(basename $@ .po) -o $@ -i $<;	\
	fi

help:
	$(info $(HELP))
	@echo

setup:
	@mkdir -p locales

.PHONY:setup help

define HELP
This Makefile assists in handling i18n related tasks during development. Files
that need to be checked into source control are put into the locales/ directory.
They are

  locales/messages.pot   - the POT file generated by 'make update-pot'
  locales/$$LANG.po       - the translations for $$LANG
  locales/locales.txt    - a list of the available translations

Only the $$LANG.po files should be edited manually; this is usually done by
translators.

You can use the following targets:

  i18n:             refresh all the files in locales/ and recompile resources
  locales/LANG.po:  refresh or create translations for LANG
  msgfmt:           compile the translations into Java classes; this step is
                    needed to make translations available to the Clojure code
                    and produces Java class files in resources/
endef
# @todo lutter 2015-04-20: for projects that use libraries with their own
# translation, we need to combine all their translations into one big po
# file and then run msgfmt over that so that we only have to deal with one
# resource bundle
