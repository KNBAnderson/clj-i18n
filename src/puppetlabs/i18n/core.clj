(ns puppetlabs.i18n.core
  (:gen-class)
  (:require [clojure.java.io :as io]))

;;; General setup/info
(def bundle-name
  "The base name of the message bundle to use. Set this to PROJECT.Messages
  when you intialize your program"
  "puppetlabs.i18n.Messages")

(defn available-locales
  "Read the file locales.txt generated by the msgfmt make target and create
  a list of strings from it"
  []
  (with-open
      [rdr (io/reader (io/resource "locales.txt"))]
    (into [] (line-seq rdr))))

;;; Handling the current locale
(defn global-locale
  "Get the globally set locale"
  []
  (. java.util.Locale getDefault))

(defn current-locale []
  ;; @todo lutter 2015-04-21: prefer a thread-local locale over the
  ;; global (JVM-wide) locale. Requires that we have some logic around
  ;; setting/getting per-thread locale
  (global-locale))

;; @todo lutter 2015-04-21: there are various formats of string locales
;; we need to make sure we have the right one. For example, "en_US" leads
;; to a bad locale, whereas "en-us" works
(defn string-as-locale [loc]
  (java.util.Locale/forLanguageTag loc))

;;; ResourceBundles
(defmulti get-bundle
  "Get the java.util.ResourceBundle for the given locale (a string)"
  class)

(defmethod get-bundle java.lang.String [loc]
  (get-bundle (string-as-locale loc)))

(defmethod get-bundle java.util.Locale [loc]
  (let [cl (.getContextClassLoader (Thread/currentThread))]
    ;; @todo lutter 2015-04-21: we need to figure out what package to use,
    ;; can't stay hardcoded as "puppetlabs.i18n"
    (java.util.ResourceBundle/getBundle bundle-name loc)))

;;; Message lookup/formatting
(defn lookup
  "Look msg up in the resource bundle for loc. If there is no resource
  bundle for it, or the resource bundle does not contain an entry for msg,
  return msg itself"
  ([msg] (lookup (current-locale) msg))
  ([loc msg]
   (try
     (.getString (get-bundle loc) msg)
     (catch java.util.MissingResourceException e
       ;; This gets thrown both when there is no bundle for the given locale
       ;; and when the bundle exists but does not contain a key for msg
       msg))))

(defn fmt
  "Use msg as a java.text.MessageFormat and interpolate the args
  into it according to locale loc.

  See the documentation for java.text.MessageFormat for the details of what
  patterns are available."
  ([msg args] (fmt (current-locale) msg args))
  ([loc msg args]
   (.format (new java.text.MessageFormat msg loc) args)))

(defn tr
  "Translate a message into the current locale, interpolating as needed"
  [msg & args]
  (let [loc (current-locale)]
    (fmt loc (lookup loc msg) (to-array args))))
